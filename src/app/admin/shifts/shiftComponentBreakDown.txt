Component Breakdown:
1. Modal Components

AISchedulerModal - Handles AI scheduling options
OpenShiftsModal - Displays and manages open shifts
ShiftSwapsModal - Manages shift swap requests
EditShiftTimeModal - Edit shift times

2. UI Components

ShiftCard - Individual shift display with drag/drop
EmptyShiftCell - Empty cells for adding shifts
ScheduleHeader - Date navigation and view controls
ScheduleFilters - Location, search, and department filters
ComplianceWarnings - Displays compliance issues
ScheduleGrid - Main schedule table layout

3. Main Component

SchedulerPage - Refactored main component that orchestrates everything

Key Benefits of This Structure:
Modularity: Each component has a single responsibility and can be tested/maintained independently.
Reusability: Components like ShiftCard and modals can be reused in other parts of your application.
Maintainability: Bugs and feature updates are isolated to specific components.
Type Safety: Each component has well-defined TypeScript interfaces.
Separation of Concerns: Business logic is separated from UI components.
Integration Steps:

Create a components folder in your scheduler directory
Place each component in its own file
Use the index file for clean imports
Replace your existing scheduler with the refactored SchedulerPage

Future Connecteam Integration:
The modular structure makes it easy to integrate Connecteam features:

Replace mock data in modals with actual API calls
Add new components for additional Connecteam features
Extend existing components with new props/functionality

The components maintain the same functionality as your original code while being much more organized and maintainable. Each component can now be developed, tested, and debugged independently.